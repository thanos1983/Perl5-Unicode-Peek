.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Unicode::Peek 3"
.TH Unicode::Peek 3 "2017-09-27" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 2
\&    Unicode::Peek \- Perl module supports different unicode(s) transformation formats
\&    to hex and vice versa.
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&    Version 0.08
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    The Unicode::Peek \- Perl module provides to the user the ability to encode/
\&    decode asccii strings in a variety of unicode transformations to hex and vice
\&    versa. The user is able to take a peek in the hex data and see the formatted
\&    output and also vise versa. The user can provided an array of data in a hex
\&    format and convert it back to ascii. Perl version 5.13.2 or greater is required.
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 4
\&    The module is able to encode/decode any kind of ascci character(s) for 14
\&    different formats (e.g. utf8, UCS\-2 ...). It configured to produce also to
\&    Dump Hexadecimal output and process Hexadecimal input. This feature was added
\&    mainly for debbuging purposes.
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.Vb 2
\&    use Unicode::Peek ( \*(Aqascii2hexEncode\*(Aq, \*(Aqhex2ascciiDecode\*(Aq,
\&                        \*(AqhexDumperOutput\*(Aq, \*(AqhexDumperInput\*(Aq );
\&
\&    my $hexEncoded         = ascii2hexEncode($unicodeFormat, $ascciiCharacters);
\&    ...
\&
\&    my $ascciiCharacters   = hex2ascciiDecode($unicodeFormat, $hexEncoded);
\&    ...
\&
\&    my @hexFormattedOutput = hexDumperOutput($unicodeFormat, $ascciiCharacters);
\&    ...
\&
\&    my $ascciiCharacters   = hexDumperInput($unicodeFormat, \e@hexFormattedOutput);
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exports four methods (ascii2hexEncode, hex2ascciiDecode, hexDumperOutput
    and hexDumperInput). All methods support 14 different encoding and decoding formats.
cd    The module has been tested with multiple languages with complex characters, but not
    with all known languages in the planet. So far as many languages have been tested all
    characters where encoded / decoded correctly.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
.Vb 1
\&    None by default, but the module can also export all methods by simple declaring all:
\&
\&    use Unicode::Peek \*(Aq:all\*(Aq;
.Ve
.SH "SUPPORTED UNICODE FORMATS"
.IX Header "SUPPORTED UNICODE FORMATS"
.IP "\(bu" 4
\&\s-1UCS\-2\s0
.IP "\(bu" 4
\&\s-1UCS\-2BE\s0
.IP "\(bu" 4
\&\s-1UCS\-2LE\s0
.IP "\(bu" 4
\&\s-1UCS\-4\s0
.IP "\(bu" 4
\&\s-1UTF\-7\s0
.IP "\(bu" 4
utf8
.IP "\(bu" 4
utf8\-strict
.IP "\(bu" 4
\&\s-1UTF\-8\s0
.IP "\(bu" 4
\&\s-1UTF\-16\s0
.IP "\(bu" 4
\&\s-1UTF\-16BE\s0
.IP "\(bu" 4
\&\s-1UTF\-16LE\s0
.IP "\(bu" 4
\&\s-1UTF\-32\s0
.IP "\(bu" 4
\&\s-1UTF\-32BE\s0
.IP "\(bu" 4
\&\s-1UTF\-32LE\s0
.SH "EXAMPLE 1 (hexDumperOutput)"
.IX Header "EXAMPLE 1 (hexDumperOutput)"
These examples bellow is for demonstration purposes, randomly choosen Chinese as a testing
    language. We will use the Data::Dumper <https://perldoc.perl.org/Data/Dumper.html> module to print the formated hex output. Necessary is also the utf8 <https://perldoc.perl.org/utf8.html> 
    for the stdout (convert the internal representation of a Perl scalar to/from \s-1UTF\-8.\s0)
.PP
.Vb 5
\&    #!/usr/bin/perl
\&    use utf8;
\&    use strict;
\&    use warnings;
\&    use Data::Dumper;
\&
\&    use Unicode::Peek qw( hexDumperOutput );
\&
\&    my $lanquage = \*(AqChinese\*(Aq;
\&
\&    my $str = \*(Aq這是一個測試\*(Aq;
\&
\&    my @flags = ( \*(AqUCS\-2\*(Aq,
\&                  \*(AqUCS\-2BE\*(Aq,
\&                  \*(AqUCS\-2LE\*(Aq,
\&                  \*(AqUCS\-4\*(Aq,
\&                  \*(AqUTF\-7\*(Aq,
\&                  \*(Aqutf8\*(Aq,
\&                  \*(AqUTF\-8\*(Aq,
\&                  \*(Aqutf\-8\-strict\*(Aq,
\&                  \*(AqUTF\-16\*(Aq,
\&                  \*(AqUTF\-16BE\*(Aq,
\&                  \*(AqUTF\-16LE\*(Aq,
\&                  \*(AqUTF\-32\*(Aq,
\&                  \*(AqUTF\-32BE\*(Aq,
\&                  \*(AqUTF\-32LE\*(Aq );
\&
\&    while ( defined ( my $flag = shift @flags ) ) {
\&        print Dumper hexDumperOutput($flag, $str);
\&    };
.Ve
.SH "EXAMPLE 2 (hexDumperInput)"
.IX Header "EXAMPLE 2 (hexDumperInput)"
.Vb 6
\&    #!/usr/bin/perl
\&    use utf8;
\&    use strict;
\&    use warnings;
\&    use Data::Dumper;
\&    use feature \*(Aqsay\*(Aq;
\&
\&    use Unicode::Peek qw( hexDumperOutput hexDumperInput );
\&
\&    my $lanquage = \*(AqChinese\*(Aq;
\&
\&    my $str = \*(Aq這是一個測試\*(Aq;
\&
\&    my @flags = ( \*(AqUCS\-2\*(Aq,
\&                  \*(AqUCS\-2BE\*(Aq,
\&                  \*(AqUCS\-2LE\*(Aq,
\&                  \*(AqUCS\-4\*(Aq,
\&                  \*(AqUTF\-7\*(Aq,
\&                  \*(Aqutf8\*(Aq,
\&                  \*(AqUTF\-8\*(Aq,
\&                  \*(Aqutf\-8\-strict\*(Aq,
\&                  \*(AqUTF\-16\*(Aq,
\&                  \*(AqUTF\-16BE\*(Aq,
\&                  \*(AqUTF\-16LE\*(Aq,
\&                  \*(AqUTF\-32\*(Aq,
\&                  \*(AqUTF\-32BE\*(Aq,
\&                  \*(AqUTF\-32LE\*(Aq );
\&
\&    while ( defined ( my $flag = shift @flags ) ) {
\&        my $hexDumper = hexDumperOutput($flag, $str);
\&        print Dumper $hexDumper;
\&        say hexDumperInput($flag, $hexDumper);
\&    };
.Ve
.SH "EXAMPLE 3 (hex2ascciiDecode ascii2hexEncode)"
.IX Header "EXAMPLE 3 (hex2ascciiDecode ascii2hexEncode)"
.Vb 5
\&    #!/usr/bin/perl
\&    use utf8;
\&    use strict;
\&    use warnings;
\&    use feature \*(Aqsay\*(Aq;
\&
\&    use Unicode::Peek qw( hex2ascciiDecode ascii2hexEncode );
\&
\&    my $lanquage = \*(AqChinese\*(Aq;
\&
\&    my $str = \*(Aq這是一個測試\*(Aq;
\&
\&    my @flags = ( \*(AqUCS\-2\*(Aq,
\&                  \*(AqUCS\-2BE\*(Aq,
\&                  \*(AqUCS\-2LE\*(Aq,
\&                  \*(AqUCS\-4\*(Aq,
\&                  \*(AqUTF\-7\*(Aq,
\&                  \*(Aqutf8\*(Aq,
\&                  \*(AqUTF\-8\*(Aq,
\&                  \*(Aqutf\-8\-strict\*(Aq,
\&                  \*(AqUTF\-16\*(Aq,
\&                  \*(AqUTF\-16BE\*(Aq,
\&                  \*(AqUTF\-16LE\*(Aq,
\&                  \*(AqUTF\-32\*(Aq,
\&                  \*(AqUTF\-32BE\*(Aq,
\&                  \*(AqUTF\-32LE\*(Aq );
\&
\&     while ( defined ( my $flag = shift @flags ) ) {
\&         my $hexEncoded = ascii2hexEncode($flag, $str);
\&         say hex2ascciiDecode($flag, $hexEncoded);
\&     };
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
The module is implemented by using 'utf8' and 'Encode', both modules are
    mandatory as prerequisites and required to be pre-installed.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Athanasios Garyfalos, E<lt>garyfalos@cpan.org<gt>
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-unicode\-peek at rt.cpan.org\*(C'\fR, or through
    the web interface at Report Bug(s) <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Unicode-Peek>.  I will be notified, and then you'll
    automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
.Vb 1
\&    You can find documentation for the module with the perldoc command.
\&
\&    perldoc Unicode::Peek
.Ve
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
Request Tracker <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Unicode-Peek>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
Annotated \s-1CPAN\s0 documentation <http://annocpan.org/dist/Unicode-Peek>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
\&\s-1CPAN\s0 Ratings <http://cpanratings.perl.org/d/Unicode-Peek>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
Unicode-Peek <http://search.cpan.org/dist/Unicode-Peek>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, utf8 <https://perldoc.perl.org/utf8.html>, \s-1UTF\-8\s0 vs. utf8 vs. \s-1UTF8\s0 <https://perldoc.perl.org/Encode.html#UTF-8-vs.-utf8-vs.-UTF8> and Data::Peek <http://search.cpan.org/~hmbrand/Data-Peek/Peek.pm>
.SH "REPOSITORY"
.IX Header "REPOSITORY"
Perl5\-Unicode\-Peek <https://github.com/thanos1983/Perl5-Unicode-Peek>
.PP
This library is free software; you can redistribute it and/or modify it under
    the same terms as Perl itself.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2017 by Athanasios Garyfalos.
.PP
This library is free software; you can redistribute it and/or modify it
    under the terms of the the Artistic License (2.0). You may obtain a
    copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
    Versions is governed by this Artistic License. By using, modifying or
    distributing the Package, you accept this license. Do not use, modify,
    or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
    by someone other than you, you are nevertheless required to ensure that
    your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
    mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
    patent license to make, have made, use, offer to sell, sell, import and
    otherwise transfer the Package with respect to any patent claims
    licensable by the Copyright Holder that are necessarily infringed by the
    Package. If you institute patent litigation (including a cross-claim or
    counterclaim) against any party alleging that the Package constitutes
    direct or contributory patent infringement, then this Artistic License
    to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER\s0
    \s-1AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.\s0
    \s-1THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\s0
    \s-1PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY\s0
    \s-1YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR\s0
    \s-1CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR\s0
    \s-1CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,\s0
    \s-1EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
.SH "CHANGE LOG"
.IX Header "CHANGE LOG"
.Vb 2
\&    $Log: Peek.pm,v $
\&    Revision 0.08  2017/09/27 15:51:21 (UCT) Thanos
.Ve
